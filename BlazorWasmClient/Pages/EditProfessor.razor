@page "/edit-professor/{id:int}"
@using BlazorWasmClient.Services
@using BlazorWasmShared.Models
@using BlazorWasmShared.Enum
@inject HttpClient Http
@inject ProfessorService ProfessorService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h3>Edit Professor</h3>

@if (professor == null)
{
    <p>Loading...</p>
}
else
{
    <div class="container">
        <div class="form-group">
            <label>Full Name</label>
            <input class="form-control" value="@professor.FullName" disabled />
        </div>

        <div class="form-group">
            <label>Keywords</label>
            <input class="form-control" value="@professor.Keywords" disabled />
        </div>

        <div class="form-group">
            <label>Papers</label>
            <input class="form-control" value="@professor.Papers" disabled />
        </div>

        <div class="form-group">
            <label>University</label>
            <input class="form-control" value="@professor.University" disabled />
        </div>
        <div class="form-group">
            <label>Email</label>
            <input class="form-control" value="@professor.Email" disabled />
        </div>
        <div class="form-group">
            <label>WOS</label>
            <a href="@professor.Wos" target="_blank">@professor.Wos</a>
        </div>

        <div class="form-group">
            <label>Web</label>
            <a href="@professor.Web" target="_blank">@professor.Web</a>
        </div>

        
        <!-- Links for loading text -->
        <div>
            <button class="btn btn-secondary" @onclick="ClearText">Clear</button>
            <button class="btn btn-info" @onclick="LoadText1">with</button>
            <button class="btn btn-info" @onclick="LoadText2">without</button>
            <button class="btn btn-info" @onclick="LoadText3">Med</button>
        </div>

        <div class="form-group">
            <textarea class="form-control" style="height: 600px;" @bind="@professor.Text"></textarea>
        </div>

        <div class="form-group">
            <label>Related</label>
            <input type="checkbox" @bind="@professor.Related" />
        </div>

        <div class="form-group">
            <label>Email Date</label>
            <input type="date" class="form-control" @bind="@professor.EmailDate" />
        </div>

        <div class="form-group">
            <label>Result</label>
            <select class="form-control" @bind="@professor.Result">
                @foreach (var value in Enum.GetValues<ResultType>())
                {
                    <option value="@value">@value</option>
                }
            </select>
        </div>
       
            @if (!string.IsNullOrEmpty(professor.Email))
            {
            <button class="btn btn-danger" @onclick="OpenEmailClient">Email</button>
            }

        <button class="btn btn-primary" @onclick="SaveChanges">Save</button>
        <button class="btn btn-secondary" @onclick="GoBack">Back</button>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private Professor? professor;
    private string emailText1 = "";
    private string emailText2 = "";
    private string emailText3 = "";
    private string emailSubject = "";
    protected override async Task OnInitializedAsync()
    {
        professor = await ProfessorService.GetProfessorById(id);

        // Load email texts from JSON
        var emailData = await Http.GetFromJsonAsync<EmailTexts>("https://amintester.github.io/EUP/emailTexts.json");
        if (emailData != null)
        {
            emailText1 = emailData.Text1;
            emailText2 = emailData.Text2;
            emailText3 = emailData.Text3;
            emailSubject = emailData.Subject;
        }
    }

    private async Task SaveChanges()
    {
        professor.UpdateDate = DateTime.Now;
        await ProfessorService.UpdateProfessor(professor);
        await JS.InvokeVoidAsync("alert", "Professor details updated successfully!");
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"professors/{professor?.Country}");
    }

    private void ClearText()
    {
        professor.Text = "";
    }

    private void LoadText1()
    {
        professor.Text = emailText1;
    }

    private void LoadText2()
    {
        professor.Text = emailText2;
    }
    private void LoadText3()
    {
        professor.Text = emailText3;
    }

    private class EmailTexts
    {
        public string Text1 { get; set; } = "";
        public string Text2 { get; set; } = "";
        public string Text3 { get; set; } = "";
        public string Subject { get; set; } = "";
    }


    private async Task OpenEmailClient()
    {
        if (!string.IsNullOrEmpty(professor.Email))
        {
            //copy to clipboard 
             await JS.InvokeVoidAsync("navigator.clipboard.writeText", professor.Text);
             
             //mailto
            string mailto = $"mailto:{professor.Email}?subject={Uri.EscapeDataString(emailSubject)}";
            Navigation.NavigateTo(mailto, forceLoad: true);

            // Update only EmailDate in the database
            await ProfessorService.UpdateEmailDateAsync(professor.Id);

        }
    }
}
