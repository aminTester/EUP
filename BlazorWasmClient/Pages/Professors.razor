@page "/professors/{country?}"
@using BlazorWasmClient.Services
@using BlazorWasmShared.Models
@using BlazorWasmShared.Enum
@using System.Text.Json
@inject ProfessorService ProfessorService
@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (string.IsNullOrEmpty(userKey))
{
    <input @bind="userKeyInput" placeholder="Enter access key" />
    <button @onclick="SaveKey">Submit</button>
}
else
{
    <button @onclick="Logout">Logout</button>

    <h3>Professors of @(country ?? "All Countries")</h3>

    @if (professors == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="container-fluid">
            <table class="table table-hover table-striped">
                <thead>
                    <tr>
                        <th @onclick="() => AddSortCriteria(nameof(Professor.FullName))" style="cursor: pointer;">
                            Full Name
                            @if (IsSorted(nameof(Professor.FullName)))
                            {
                                <span>@(GetSortIcon(nameof(Professor.FullName)))</span>
                            }
                        </th>
                        <th @onclick="() => AddSortCriteria(nameof(Professor.Keywords))" style="cursor: pointer; ">
                            Keywords
                            @if (IsSorted(nameof(Professor.Keywords)))
                            {
                                <span>@(GetSortIcon(nameof(Professor.Keywords)))</span>
                            }
                        </th>
                        <th @onclick="() => AddSortCriteria(nameof(Professor.Papers))" style="cursor: pointer;">
                            Papers
                            @if (IsSorted(nameof(Professor.Papers)))
                            {
                                <span>@(GetSortIcon(nameof(Professor.Papers)))</span>
                            }
                        </th>
                        <th>WOS</th>
                        <th>Web</th>
                        <th @onclick="() => AddSortCriteria(nameof(Professor.University))" style="cursor: pointer;">
                            University
                            @if (IsSorted(nameof(Professor.University)))
                            {
                                <span>@(GetSortIcon(nameof(Professor.University)))</span>
                            }
                        </th>
                        <th @onclick="() => AddSortCriteria(nameof(Professor.Related))" style="cursor: pointer;">
                            Related
                            @if (IsSorted(nameof(Professor.Related)))
                            {
                                <span>@(GetSortIcon(nameof(Professor.Related)))</span>
                            }
                        </th>
                        <th @onclick="() => AddSortCriteria(nameof(Professor.Result))" style="cursor: pointer;">
                            Result
                            @if (IsSorted(nameof(Professor.Result)))
                            {
                                <span>@(GetSortIcon(nameof(Professor.Result)))</span>
                            }
                        </th>
                        <th @onclick="() => AddSortCriteria(nameof(Professor.EmailDate))" style="cursor: pointer;">
                            Email Date
                            @if (IsSorted(nameof(Professor.EmailDate)))
                            {
                                <span>@(GetSortIcon(nameof(Professor.EmailDate)))</span>
                            }
                        </th>
                        <th @onclick="() => AddSortCriteria(nameof(Professor.UpdateDate))" style="cursor: pointer;">
                            Update Date
                            @if (IsSorted(nameof(Professor.UpdateDate)))
                            {
                                <span>@(GetSortIcon(nameof(Professor.UpdateDate)))</span>
                            }
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prof in professors)
                    {
                        <tr class="@(GetRowClass(prof.Result))">
                            <td>
                                <a href="edit-professor/@prof.Id">@prof.FullName</a>
                            </td>
                            <td>@prof.Keywords</td>
                            <td>@prof.Papers</td>
                            <td><a href="@prof.Wos" target="_blank">WOS</a></td>
                            <td><a href="@prof.Web" target="_blank">Website</a></td>
                            <td>@prof.University</td>
                            <td><input type="checkbox" checked="@prof.Related" disabled /></td>
                            <td>@prof.Result</td>
                            <td>@prof.EmailDate.ToShortDateString()</td>
                            <td>@prof.UpdateDate.ToString("g")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    private string userKey;
    private string userKeyInput;

    private List<Professor>? professors;
    [Parameter] public string? country { get; set; }

    private List<(string Column, bool Ascending, int ClickCount)> sortCriteria = new List<(string, bool, int)>();
    protected override async Task OnParametersSetAsync()
    {
        // Load the sorting criteria from localStorage before fetching data
        await LoadSortCriteria();

        // Fetch the professors by country
        professors = await ProfessorService.GetProfessorsByCountry(country);
        Console.WriteLine($"Loaded {professors?.Count} professors from country {country ?? "All Countries"}");

        // Apply sorting only if professors are not null or empty
        if (professors != null && professors.Any())
        {
            ApplySorting();  // Apply sorting after professors are loaded
        }
        else
        {
            Console.WriteLine("No professors to display.");
        }
    }


    private async Task SaveKey()
    {
        if (string.IsNullOrWhiteSpace(userKeyInput))
            return;

        await JS.InvokeVoidAsync("setCookie", "accessKey", userKeyInput, 365); // Store for 1 year
        userKey = userKeyInput;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("deleteCookie", "accessKey");
        userKey = null;
        StateHasChanged();
    }

    private string GetRowClass(ResultType? result)
    {
        return result switch
        {
            ResultType.Emailed => "table-secondary",
            ResultType.Progress => "table-primary",
            ResultType.Reject => "table-danger",
            ResultType.Accept => "table-success",
            _ => ""
        };
    }

    private async Task AddSortCriteria(string column)
    {
        Console.WriteLine("Sorting by: " + column);  // Debugging line

        // Check if the column already has sorting criteria
        var existing = sortCriteria.FirstOrDefault(s => s.Column == column);

        if (existing.Column != null)
        {
            if (existing.ClickCount == 2)
            {
                // Remove it if clicked twice (toggle off)
                sortCriteria.Remove(existing);
            }
            else
            {
                // Toggle ascending/descending order
                sortCriteria.Remove(existing);
                sortCriteria.Add((column, !existing.Ascending, existing.ClickCount + 1));
            }
        }
        else
        {
            // Add new criteria for the column, starting with ascending order
            sortCriteria.Add((column, true, 1));
        }

        ApplySorting();
        await SaveSortCriteria();  // Save sorting preferences after user action
    }





    private async Task SaveSortCriteria()
    {
        // Serialize the sort criteria to JSON
        var sortJson = JsonSerializer.Serialize(sortCriteria);
        Console.WriteLine("Saving Sorting Criteria: " + sortJson);  // Debugging line

        // Save to localStorage
        await JS.InvokeVoidAsync("localStorage.setItem", "sortCriteria", sortJson);
    }



    private async Task LoadSortCriteria()
    {
        var sortJson = await JS.InvokeAsync<string>("localStorage.getItem", "sortCriteria");
        Console.WriteLine("Loaded Sorting Criteria: " + sortJson);  // Debugging line

        if (!string.IsNullOrEmpty(sortJson))
        {
            try
            {
                // Deserialize the sorting criteria
                var loadedCriteria = JsonSerializer.Deserialize<List<(string Column, bool Ascending, int ClickCount)>>(sortJson);

                if (loadedCriteria != null && loadedCriteria.All(s => !string.IsNullOrEmpty(s.Column) && typeof(Professor).GetProperty(s.Column) != null))
                {
                    // Only set valid criteria
                    sortCriteria = loadedCriteria;
                }
                else
                {
                    // Reset to default if invalid
                    sortCriteria = new List<(string, bool, int)>();
                    Console.WriteLine("Invalid sorting criteria detected, resetting to default.");
                }
            }
            catch (Exception ex)
            {
                // Catch any deserialization issues and reset
                Console.WriteLine($"Error deserializing sorting criteria: {ex.Message}");
                sortCriteria = new List<(string, bool, int)>();
            }
        }
        else
        {
            Console.WriteLine("No sorting criteria found in localStorage.");
            sortCriteria = new List<(string, bool, int)>();
        }
    }



    private void ApplySorting()
    {
        if (professors == null || !professors.Any() || sortCriteria.Count == 0)
        {
            Console.WriteLine("No sorting criteria or no professors to sort.");
            return;
        }

        IOrderedEnumerable<Professor> sortedProfessors = professors.OrderBy(p => 1); // Default sort (no-op)

        foreach (var (column, ascending, _) in sortCriteria)
        {
            sortedProfessors = ascending
                ? sortedProfessors.ThenBy(p => GetPropertyValue(p, column))
                : sortedProfessors.ThenByDescending(p => GetPropertyValue(p, column));
        }

        professors = sortedProfessors.ToList(); // Update the list with sorted data
        StateHasChanged(); // Trigger re-render
        Console.WriteLine($"Sorted professors list by {string.Join(", ", sortCriteria.Select(s => s.Column))}");
    }


    private object? GetPropertyValue(Professor prof, string propertyName)
    {
        if (string.IsNullOrEmpty(propertyName))
        {
            return null;
        }

        var property = typeof(Professor).GetProperty(propertyName);
        var value = property?.GetValue(prof);

        Console.WriteLine($"Property: {propertyName}, Value: {value}"); // Debugging line
        return value;
    }



    private bool IsSorted(string column)
    {
        return sortCriteria.Any(s => s.Column == column);
    }

    private string GetSortIcon(string column)
    {
        var criteria = sortCriteria.FirstOrDefault(s => s.Column == column);
        if (criteria.Column == null)
            return "";  // No sorting applied

        return criteria.Ascending ? "▲" : "▼"; // Sorting icons
    }



}
