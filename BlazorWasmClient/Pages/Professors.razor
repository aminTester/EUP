@page "/professors/{country?}"
@using BlazorWasmClient.Services
@using BlazorWasmShared
@using BlazorWasmShared.Models
@using BlazorWasmShared.Enum
@inject ProfessorService ProfessorService
@inject NavigationManager Navigation
@inject IJSRuntime JS

@if (string.IsNullOrEmpty(userKey))
{
    <input @bind="userKeyInput" placeholder="Enter access key" />
    <button @onclick="SaveKey">Submit</button>
}
else
{
    <button @onclick="Logout">Logout</button>

    <h3>Professors of @(country ?? "All Countries")</h3>

    @if (professors == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="container-fluid">
            <table class="table table-hover table-striped">
                <thead>
                    <tr>
                        @foreach (var column in sortableColumns)
                        {
                            <th @onclick="() => SortBy(column)">
                                @column.DisplayName
                                @if (column.SortOrder != null)
                                {
                                    <span>@(column.SortOrder == SortDirection.Ascending ? "▲" : "▼")</span>
                                }
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var prof in FilteredAndSortedProfessors)
                    {
                        <tr class="@(GetRowClass(prof.Result))">
                            <td>
                                <a href="edit-professor/@prof.Id">@prof.FullName</a>
                            </td>
                            <td>@prof.Keywords</td>
                            <td>@prof.Papers</td>
                            <td><a href="@prof.Wos" target="_blank">WOS</a></td>
                            <td><a href="@prof.Web" target="_blank">Website</a></td>
                            <td>@prof.University</td>
                            <td><input type="checkbox" checked="@prof.Related" disabled /></td>
                            <td>@prof.EmailDate.ToShortDateString()</td>
                            <td>@prof.UpdateDate.ToString("g")</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}

@code {
    private string userKey;
    private string userKeyInput;
    private List<Professor>? professors;
    [Parameter] public string? country { get; set; }

    private List<SortableColumn> sortableColumns = new()
    {
        new SortableColumn(nameof(Professor.FullName)),
        new SortableColumn(nameof(Professor.Keywords)),
        new SortableColumn(nameof(Professor.Papers)),
        new SortableColumn(nameof(Professor.University)),
        new SortableColumn(nameof(Professor.Related)),
        new SortableColumn(nameof(Professor.EmailDate)),
        new SortableColumn(nameof(Professor.UpdateDate))
    };

    protected override async Task OnParametersSetAsync()
    {
        userKey = await JS.InvokeAsync<string>("getCookie", "accessKey");
        professors = await ProfessorService.GetProfessorsByCountry(country);
    }

    private async Task SaveKey()
    {
        if (string.IsNullOrWhiteSpace(userKeyInput))
            return;

        await JS.InvokeVoidAsync("setCookie", "accessKey", userKeyInput, 365);
        userKey = userKeyInput;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("deleteCookie", "accessKey");
        userKey = null;
        StateHasChanged();
    }

    private string GetRowClass(ResultType? result)
    {
        return result switch
        {
            ResultType.Emailed => "table-secondary",
            ResultType.Progress => "table-primary",
            ResultType.Reject => "table-danger",
            ResultType.Accept => "table-success",
            _ => ""
        };
    }

    private void SortBy(SortableColumn column)
    {
        if (column.SortOrder == null)
        {
            column.SortOrder = SortDirection.Ascending;
        }
        else if (column.SortOrder == SortDirection.Ascending)
        {
            column.SortOrder = SortDirection.Descending;
        }
        else
        {
            column.SortOrder = null;
        }
    }

    private IEnumerable<Professor> FilteredAndSortedProfessors => professors
        .Where(p => string.IsNullOrWhiteSpace(userKey) || p.FullName.Contains(userKey, StringComparison.OrdinalIgnoreCase))
        .OrderByMultiple(sortableColumns.Where(c => c.SortOrder != null).ToList());
}


