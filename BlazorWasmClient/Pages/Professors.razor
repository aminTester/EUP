@page "/professors/{country?}"
@using BlazorWasmClient.Services
@inject ProfessorService ProfessorService
@using BlazorWasmShared.Models
@using BlazorWasmShared.Enum

<h3>Professors of @SelectedCountry</h3>

@if (professors == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table table-hover table-striped">
        <thead>
            <tr>
                <th @onclick="() => SortBy(nameof(Professor.FullName))">Full Name</th>
                <th>Keywords</th>
                <th @onclick="() => SortBy(nameof(Professor.Papers))">Papers</th>
                <th>WOS</th>
                <th>Web</th>
                <th>Email</th>
                <th @onclick="() => SortBy(nameof(Professor.University))">University</th>
                <th @onclick="() => SortBy(nameof(Professor.Related))">Related</th>
                <th @onclick="() => SortBy(nameof(Professor.EmailDate))">Email Date</th>
                <th @onclick="() => SortBy(nameof(Professor.UpdateDate))">Update Date</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var prof in professors)
            {
                <tr class="@(GetRowColor(prof.Result))">
                    <td>@prof.FullName</td>
                    <td>@prof.Keywords</td>
                    <td>@prof.Papers</td>
                    <td><a href="@prof.Wos" target="_blank">WOS</a></td>
                    <td><a href="@prof.Web" target="_blank">Web</a></td>
                    <td><a href="mailto:@prof.Email">@prof.Email</a></td>
                    <td>@prof.University</td>
                    <td><input type="checkbox" checked="@prof.Related" disabled /></td>
                    <td>@prof.EmailDate?.ToShortDateString()</td>
                    <td>@prof.UpdateDate?.ToString("g")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public string? country { get; set; }
    private List<Professor>? professors;
    private string SelectedCountry => country ?? "All";
    private string sortColumn = nameof(Professor.FullName);
    private bool ascending = true;

    protected override async Task OnInitializedAsync()
    {
        professors = await ProfessorService.GetProfessorsByCountry(country);
    }

    private void SortBy(string column)
    {
        if (sortColumn == column)
        {
            ascending = !ascending;
        }
        else
        {
            sortColumn = column;
            ascending = true;
        }

        professors = ascending
            ? professors.OrderBy(p => p.GetType().GetProperty(sortColumn).GetValue(p, null)).ToList()
            : professors.OrderByDescending(p => p.GetType().GetProperty(sortColumn).GetValue(p, null)).ToList();
    }

    private string GetRowColor(ResultType? result)
    {
        return result switch
        {
            ResultType.Emailed => "table-secondary",
            ResultType.Progress => "table-primary",
            ResultType.Reject => "table-danger",
            ResultType.Accept => "table-success",
            _ => ""
        };
    }
}