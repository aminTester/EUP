@page "/"
@using BlazorWasmClient.Services
@using BlazorWasmShared.Models

@inject ProfessorService ProfessorService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

@if (string.IsNullOrEmpty(userKey))
{
    <input @bind="userKeyInput" placeholder="Enter access key" />
    <button @onclick="SaveKey">Submit</button>
}
else
{
    <button class="btn btn-info" @onclick ="Logout">Logout</button>
    <button class="btn btn-danger" @onclick ="ExportProfessors">Export to Excel</button>
    <InputFile OnChange="HandleFileSelected" accept=".xlsx" />
    <button class="btn btn-success" @onclick ="ImportProfessors" >Upload</button>
    <button class="btn btn-warning mt-2" @onclick="UpdateEmails" >ReplaceText</button>
    <button class="btn btn-warning mt-2" @onclick="UpdateEmailsDate" >ReplaceDateResult</button>

}

@code {
    private string userKey;
    private string userKeyInput;

    private IBrowserFile selectedFile;
    private List<Professor>? professors;

    protected override async Task OnInitializedAsync()
    {
        userKey = await JS.InvokeAsync<string>("getCookie", "accessKey");
    }
    private async Task SaveKey()
    {
        if (string.IsNullOrWhiteSpace(userKeyInput))
            return;

        await JS.InvokeVoidAsync("setCookie", "accessKey", userKeyInput, 365); // Store for 1 year
        userKey = userKeyInput;
        StateHasChanged();
    }

    private async Task Logout()
    {
        await JS.InvokeVoidAsync("deleteCookie", "accessKey");
        userKey = null;
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }
    private async Task ExportProfessors()
    {
        var fileUrl = await ProfessorService.ExportProfessorsToExcel();
        Navigation.NavigateTo(fileUrl, true);
    }

    private async Task ImportProfessors()
    {
        if (selectedFile is null)
        {
            Console.WriteLine("No file selected.");
            return;
        }

        await ProfessorService.ImportProfessorsFromExcel(selectedFile);
    }

    private string message;

    private async Task UpdateEmails()
    {
        var replacements = new Dictionary<string, string>
        {
            {"\n\n","\n"}
        };

        var dto = new EmailBatchUpdateDto
            {
                Replacements = replacements
            };

        message = await ProfessorService.UpdateAllEmailTextsAsync(replacements);

    }

    public class EmailBatchUpdateDto
    {
        public Dictionary<string, string> Replacements { get; set; }
    }

     private async Task UpdateEmailsDate()
    {
        message = await ProfessorService.UpdateAllEmailDateAsync();

    }

}